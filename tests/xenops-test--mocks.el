;; -*- lexical-binding: t -*-

(setq xenops-math-latex-process 'dvisvgm)

(setq xenops-test--example-svg
      "<?xml version='1.0' encoding='UTF-8'?>
<!-- This file was generated by dvisvgm 2.3.5 -->
<svg height='1.992528pt' version='1.1' viewBox='-0.996264 -0.996264 1.992528 1.992528' width='1.992528pt' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'>
<g id='page1' transform='matrix(1.253143 0 0 1.253143 0 0)'>
<rect fill='#ffffff' height='0' width='0' x='0' y='0'/>
</g>
</svg>")

(setq xenops-test--example-svg--cache-file (make-temp-file "xenops-test" nil ".tex"))

(add-hook 'kill-emacs-hook (lambda () (f-delete xenops-test--example-svg--cache-file)))

(let ((xenops-mode-orig (symbol-function 'xenops-mode)))
  (defun xenops-mode (&rest args)
    "An altered version of `xenops-mode' for use in tests.

Activate `latex-mode' and override minor-mode activation function
to not make `xenops-doctor' checks."
    (cl-letf (((symbol-function 'xenops-doctor)
               (lambda (&rest args) (interactive) nil)))
      (latex-mode)
      (funcall xenops-mode-orig args))))

(defun xenops-math-render (element &optional _)
  "A mock of `xenops-math-render'."
  (xenops-math-latex-create-image element nil nil
                                  xenops-test--example-svg--cache-file #'identity)
  (xenops-math-display-image element nil nil xenops-test--example-svg--cache-file))

(defun xenops-math-latex-create-image (element _ _ file callback)
  "A mock of `xenops-math-latex-create-image'.

The real `xenops-math-latex-create-image' is asynchronous. Xenops
does not currently have a way of testing asynchronous code
paths."
  (with-temp-buffer
    (insert xenops-test--example-svg)
    (write-file file))
  (funcall callback element))

(defun org-latex-color (attr)
  "A mock of `org-latex-color'.

The real `org-latex-color' makes use of face attributes which are
not set when the tests are running."
  (cond
   ((eq attr :foreground) "0,0,0")
   ((eq attr :background) "1,1,1")
   (t (error "Unexpected input: %s" attr))))
